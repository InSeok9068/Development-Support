# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI_Development-Support

on:
  push:
    branches: ['release']

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      backend-working-directory: ./apps/backend
      frontend-working-directory: ./apps/frontend

    strategy:
      matrix:
        node-version: [18.19.1]

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: project install dependencies
        run: pnpm install --frozen-lockfile

      - name: setting .env
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_GRAPHQL_URL=${{ secrets.VITE_GRAPHQL_URL }}" >> .env
          echo "VITE_FIRE_BASE_API_KEY=${{ secrets.VITE_FIRE_BASE_API_KEY }}" >> .env
          echo "VITE_FIRE_BASE_AUTH_DOMAIN=${{ secrets.VITE_FIRE_BASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIRE_BASE_PROJECT_ID=${{ secrets.VITE_FIRE_BASE_PROJECT_ID }}" >> .env
          echo "VITE_FIRE_BASE_STORAGE_BUCKET=${{ secrets.VITE_FIRE_BASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIRE_BASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIRE_BASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIRE_BASE_APP_ID=${{ secrets.VITE_FIRE_BASE_APP_ID }}" >> .env
        working-directory: ${{ env.frontend-working-directory }}

      - name: frontend npm build
        run: npm run build
        working-directory: ${{ env.frontend-working-directory }}

      - name: zip frontend build folder
        run: tar -cvf public.tar public
        working-directory: ${{ env.backend-working-directory }}

      - name: scp action
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: 'apps/backend/public.tar'
          target: 'deploy'

  deploy-run:
    needs: build
    runs-on: [self-hosted]
    env:
      project-working-directory: /home/ubuntu/Development-Support
      backend-working-directory: /home/ubuntu/Development-Support/apps/backend
      frontend-working-directory: /home/ubuntu/Development-Support/apps/frontend

    steps:
      - name: git pull
        run: |
          cd /home/ubuntu/Development-Support
          git pull

      - name: project install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ${{ env.project-working-directory }}

      - name: backend prisma generate
        run: npm run prisma:generate
        working-directory: ${{ env.backend-working-directory }}

      - name: backend npm build
        run: npm run build
        working-directory: ${{ env.backend-working-directory }}

      - name: frontend deploy unzip
        run: tar -xvf /home/ubuntu/deploy/apps/backend/public.tar -C /home/ubuntu/Development-Support/apps/backend

      - name: run new server (in background)
        env:
          RUNNER_TRACKING_ID: ''
        run: |
          cd /home/ubuntu/Development-Support/apps/backend
          nohup npm run start </dev/null >/dev/null 2>&1 &

  deploy-message:
    needs: deploy-run
    runs-on: ubuntu-22.04

    steps:
      # ë¹Œë“œ ì„±ê³µ ë©”ì„¸ì§€ ë°œì†¡
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Author: ${{github.actor}}

            Status: ðŸ˜š **Success**

            Commit message: ${{ github.event.commits[0].message }}

            [See changes](https://github.com/${{ github.repository }}/commit/${{github.sha}})

      # ë¹Œë“œ ì‹¤íŒ¨ ë©”ì„¸ì§€ ë°œì†¡
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Author: ${{github.actor}}

            Status: ðŸ˜± **Failure**

            Commit message: ${{ github.event.commits[0].message }}

            [link](https://github.com/${{ github.repository }}/actions)
