# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI_Development-Support

on:
  push:
    branches: ['release']

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      backend-working-directory: ./backend
      frontend-working-directory: ./frontend

    strategy:
      matrix:
        node-version: [18.15.0]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: frontend install dependencies
        run: npm install
        working-directory: ${{ env.frontend-working-directory }}

      - name: frontend npm build
        run: npm run build --if-present
        working-directory: ${{ env.frontend-working-directory }}

      - name: zip frontend build folder
        run: tar -cvf public.tar public
        working-directory: ${{ env.backend-working-directory }}

      - name: scp action
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: 'backend/public.tar'
          target: 'deploy'

  deploy-run:
    needs: build
    runs-on: [self-hosted]
    env:
      backend-working-directory: /home/ubuntu/Development-Support/backend
      frontend-working-directory: /home/ubuntu/Development-Support/frontend

    strategy:
      matrix:
        node-version: [18.15.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      # ì°¸ê³  https://velog.io/@ron/Github-Action-%EC%9C%BC%EB%A1%9C-%EB%AC%BC%EB%A6%AC%EC%84%9C%EB%B2%84%EC%97%90-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0
      - name: stop old server (ignore error)
        run: |
          killall -9 node || true

      - name: git pull
        run: |
          cd /home/ubuntu/Development-Support
          git pull

      - name: backend npm install
        run: npm install
        working-directory: ${{ env.backend-working-directory }}

      - name: backend npm build
        run: npm run build --if-present
        working-directory: ${{ env.backend-working-directory }}

      - name: frontend deploy unzip
        run: tar -xvf /home/ubuntu/deploy/backend/public.tar -C /home/ubuntu/Development-Support/backend

      - name: run new server (in background)
        env:
          RUNNER_TRACKING_ID: ''
        run: |
          cd /home/ubuntu/Development-Support/backend
          nohup npm run start </dev/null >/dev/null 2>&1 &

  deploy-message:
    needs: deploy-run
    runs-on: ubuntu-22.04

    steps:
      # ë¹Œë“œ ì„±ê³µ ë©”ì„¸ì§€ ë°œì†¡
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: success()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Author: ${{github.actor}}

            Status: ðŸ˜š **Success**

            Commit message: ${{ github.event.commits[0].message }}

            [See changes](https://github.com/${{ github.repository }}/commit/${{github.sha}})

      # ë¹Œë“œ ì‹¤íŒ¨ ë©”ì„¸ì§€ ë°œì†¡
      - name: Send Build Success Message
        uses: appleboy/telegram-action@master
        if: failure()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Author: ${{github.actor}}

            Status: ðŸ˜± **Failure**

            Commit message: ${{ github.event.commits[0].message }}

            [link](https://github.com/${{ github.repository }}/actions)
